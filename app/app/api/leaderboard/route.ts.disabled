
import { NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/lib/auth';
import { prisma } from '@/lib/db';
import { withSecurity } from '@/lib/security-middleware';
import { rateLimiters } from '@/lib/rate-limiter';

export const dynamic = "force-dynamic";

export const GET = withSecurity(
  async (request: Request) => {
    const { searchParams } = new URL(request.url);
    const period = searchParams.get('period') || 'all'; // all, week, month
    const limit = parseInt(searchParams.get('limit') || '10');

    let dateFilter: any = {};
    
    if (period === 'week') {
      const oneWeekAgo = new Date();
      oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);
      dateFilter = { gte: oneWeekAgo };
    } else if (period === 'month') {
      const oneMonthAgo = new Date();
      oneMonthAgo.setMonth(oneMonthAgo.getMonth() - 1);
      dateFilter = { gte: oneMonthAgo };
    }

    // Get user stats
    const users = await prisma.user.findMany({
      where: {
        role: { in: ['employee', 'foreman', 'manager'] }
      },
      include: {
        _count: {
          select: {
            createdJobs: true,
            employeeAchievements: dateFilter.gte ? {
              where: { earnedDate: dateFilter }
            } : true,
          }
        }
      },
      take: limit,
    });

    // Calculate points for each user
    const leaderboard = users.map(user => ({
      id: user.id,
      name: `${user.firstName} ${user.lastName}`,
      email: user.email,
      avatar: user.image,
      jobsCompleted: user._count.createdJobs,
      achievementsCount: user._count.employeeAchievements,
      totalPoints: (user._count.createdJobs * 10) + (user._count.employeeAchievements * 50),
      level: Math.floor((user._count.employeeAchievements * 50) / 100) + 1,
    }))
    .sort((a, b) => b.totalPoints - a.totalPoints)
    .map((user, index) => ({
      ...user,
      rank: index + 1,
    }));

    return NextResponse.json(leaderboard);
  },
  {
    requireAuth: true,
    rateLimit: rateLimiters.general,
  }
);
