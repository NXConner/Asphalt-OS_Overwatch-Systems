
import { NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/lib/auth';
import { prisma } from '@/lib/db';
import { withSecurity } from '@/lib/security-middleware';
import { rateLimiters } from '@/lib/rate-limiter';
import { createRevenueSchema, updateRevenueSchema } from '@/lib/validations/revenue.validation';

export const dynamic = "force-dynamic";

export const GET = withSecurity(
  async (request: Request) => {
    const { searchParams } = new URL(request.url);
    const startDate = searchParams.get('startDate');
    const endDate = searchParams.get('endDate');
    const category = searchParams.get('category');

    const where: any = {};
    
    if (startDate && endDate) {
      where.date = {
        gte: new Date(startDate),
        lte: new Date(endDate),
      };
    }
    
    if (category) {
      where.category = category;
    }

    const revenues = await prisma.revenue.findMany({
      where,
      include: {
        invoice: true,
        job: {
          select: {
            title: true,
            address: true,
          },
        },
      },
      orderBy: {
        date: 'desc',
      },
    });

    return NextResponse.json(revenues);
  },
  {
    requireAuth: true,
    rateLimit: rateLimiters.general,
  }
);

export const POST = withSecurity(
  async (request: Request) => {
    const data = await request.json();
    
    const revenue = await prisma.revenue.create({
      data: {
        source: data.source,
        amount: data.amount,
        category: data.category,
        date: new Date(data.date),
        description: data.description,
        invoiceId: data.invoiceId,
        jobId: data.jobId,
        paymentMethod: data.paymentMethod,
      },
    });

    return NextResponse.json(revenue, { status: 201 });
  },
  {
    requireAuth: true,
    allowedRoles: ['admin', 'manager'],
    validationSchema: createRevenueSchema,
    rateLimit: rateLimiters.general,
  }
);

export const PUT = withSecurity(
  async (request: Request) => {
    const data = await request.json();
    const { id, ...updateData } = data;

    const revenue = await prisma.revenue.update({
      where: { id },
      data: {
        ...updateData,
        date: updateData.date ? new Date(updateData.date) : undefined,
      },
    });

    return NextResponse.json(revenue);
  },
  {
    requireAuth: true,
    allowedRoles: ['admin', 'manager'],
    validationSchema: updateRevenueSchema,
    rateLimit: rateLimiters.general,
  }
);

export const DELETE = withSecurity(
  async (request: Request) => {
    const { searchParams } = new URL(request.url);
    const id = searchParams.get('id');

    if (!id) {
      return NextResponse.json({ error: 'Revenue ID required' }, { status: 400 });
    }

    await prisma.revenue.delete({
      where: { id },
    });

    return NextResponse.json({ success: true });
  },
  {
    requireAuth: true,
    allowedRoles: ['admin'],
    rateLimit: rateLimiters.strict,
  }
);
