generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/asphalt_paving_maps/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// User authentication and roles
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(EMPLOYEE)
  firstName     String?
  lastName      String?
  phone         String?
  address       String?
  bio           String?
  hourlyRate    Float     @default(20.00)
  isActive      Boolean   @default(true)
  hireDate      DateTime  @default(now())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  estimates     Estimate[]
  timesheets    Timesheet[]
  createdJobs   Job[]     @relation("CreatedBy")
  createdExpenses Expense[] @relation("CreatedExpenses")
  approvedExpenses Expense[] @relation("ApprovedExpenses")
  createdRevenues Revenue[] @relation("CreatedRevenues")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Enums
enum Role {
  ADMIN
  OWNER
  EMPLOYEE
}

enum JobStatus {
  POSSIBLE    // Yellow
  COMPLETED   // Green
  LOST        // Red
  IN_PROGRESS // Blue
}

enum JobType {
  SEALCOATING
  CRACK_REPAIR
  ASPHALT_PATCHING
  LINE_STRIPING
  COMBINATION
}

enum EstimateStatus {
  DRAFT
  SENT
  APPROVED
  REJECTED
  EXPIRED
}

// Jobs and addresses
model Job {
  id          String    @id @default(cuid())
  title       String
  address     String
  latitude    Float?
  longitude   Float?
  status      JobStatus @default(POSSIBLE)
  type        JobType
  description String?
  notes       String?
  
  // Contact information
  contactName  String?
  contactEmail String?
  contactPhone String?
  
  // Job details
  squareFootage    Float?
  linearFootage    Float?
  numberOfStalls   Int?
  hasOilSpots      Boolean @default(false)
  crackSeverity    String? // LIGHT, MEDIUM, HEAVY
  
  // Scheduling
  scheduledDate    DateTime?
  completedDate    DateTime?
  estimatedHours   Float?
  actualHours      Float?
  
  // Financial
  estimatedCost    Float?
  actualCost       Float?
  invoicedAmount   Float?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?
  creator   User?    @relation("CreatedBy", fields: [createdBy], references: [id])
  
  estimates Estimate[]
  materials JobMaterial[]
  expenses  Expense[]
  revenues  Revenue[]
  measurements MapMeasurement[]
}

// Estimates
model Estimate {
  id          String         @id @default(cuid())
  jobId       String
  estimateNumber String      @unique
  status      EstimateStatus @default(DRAFT)
  
  // Labor costs
  laborHours     Float
  laborRate      Float
  laborCost      Float
  
  // Material costs
  materialCost   Float
  
  // Equipment and fuel
  equipmentCost  Float
  fuelCost       Float
  
  // Travel
  travelDistance Float?
  travelCost     Float?
  
  // Totals
  subtotal       Float
  overhead       Float
  profit         Float
  totalCost      Float
  
  // Additional details
  notes          String?
  validUntil     DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String
  creator   User     @relation(fields: [createdBy], references: [id])
  job       Job      @relation(fields: [jobId], references: [id])
  
  materials EstimateMaterial[]
}

// Materials master data
model Material {
  id          String  @id @default(cuid())
  name        String
  supplier    String
  unit        String  // gallon, bag, box, etc.
  costPerUnit Float
  description String?
  category    String? // SEALER, SAND, ADDITIVE, CRACK_FILLER, etc.
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  jobMaterials      JobMaterial[]
  estimateMaterials EstimateMaterial[]
}

// Junction tables for materials
model JobMaterial {
  id         String @id @default(cuid())
  jobId      String
  materialId String
  quantity   Float
  unitCost   Float
  totalCost  Float
  
  job      Job      @relation(fields: [jobId], references: [id])
  material Material @relation(fields: [materialId], references: [id])
  
  @@unique([jobId, materialId])
}

model EstimateMaterial {
  id         String @id @default(cuid())
  estimateId String
  materialId String
  quantity   Float
  unitCost   Float
  totalCost  Float
  
  estimate Estimate @relation(fields: [estimateId], references: [id])
  material Material @relation(fields: [materialId], references: [id])
  
  @@unique([estimateId, materialId])
}

// Employee time tracking
model Timesheet {
  id        String    @id @default(cuid())
  userId    String
  clockIn   DateTime
  clockOut  DateTime?
  
  // Location tracking for geofencing
  clockInLatitude  Float?
  clockInLongitude Float?
  clockOutLatitude Float?
  clockOutLongitude Float?
  
  // Location verification
  isValidLocation Boolean @default(false)
  
  // Hours calculation
  totalHours Float?
  regularHours Float?
  overtimeHours Float?
  
  // Pay calculation
  hourlyRate Float
  regularPay Float?
  overtimePay Float?
  totalPay Float?
  
  // Job association
  jobId String?
  
  notes String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id])
}

// Payroll records
model PayrollPeriod {
  id        String   @id @default(cuid())
  startDate DateTime
  endDate   DateTime
  payDate   DateTime?
  status    String   @default("DRAFT") // DRAFT, PROCESSED, PAID
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  payrollRecords PayrollRecord[]
}

model PayrollRecord {
  id              String @id @default(cuid())
  payrollPeriodId String
  userId          String
  
  // Hours
  regularHours   Float
  overtimeHours  Float
  totalHours     Float
  
  // Rates
  regularRate    Float
  overtimeRate   Float
  
  // Pay
  regularPay     Float
  overtimePay    Float
  grossPay       Float
  
  // Deductions (if any)
  taxes          Float @default(0)
  deductions     Float @default(0)
  netPay         Float
  
  payrollPeriod PayrollPeriod @relation(fields: [payrollPeriodId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([payrollPeriodId, userId])
}

// Business settings for dynamic configuration
model BusinessSetting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  label     String
  category  String   // MATERIAL_COSTS, LABOR_RATES, EQUIPMENT_COSTS, RATES
  unit      String?  // gallon, hour, percentage, etc.
  dataType  String   @default("FLOAT") // FLOAT, STRING, BOOLEAN, INT
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Expense Categories
model ExpenseCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  isActive    Boolean  @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  expenses Expense[]
}

// Expense tracking with receipt uploads
model Expense {
  id               String    @id @default(cuid())
  description      String
  amount           Float
  expenseDate      DateTime  @default(now())
  categoryId       String
  
  // Receipt storage (S3 cloud storage path)
  receiptCloudStoragePath String?
  receiptFileName         String?
  receiptContentType      String?
  
  // Job association (if expense is related to a specific job)
  jobId            String?
  
  // Vendor information
  vendor           String?
  
  // Tax and business information
  isTaxDeductible  Boolean   @default(true)
  isReimbursable   Boolean   @default(false)
  
  // Approval workflow
  status           String    @default("PENDING") // PENDING, APPROVED, REJECTED
  approvedBy       String?
  approvedAt       DateTime?
  
  // User who created the expense
  createdBy        String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  category  ExpenseCategory @relation(fields: [categoryId], references: [id])
  job       Job?            @relation(fields: [jobId], references: [id])
  creator   User            @relation("CreatedExpenses", fields: [createdBy], references: [id])
  approver  User?           @relation("ApprovedExpenses", fields: [approvedBy], references: [id])
}

// Revenue tracking
model Revenue {
  id          String   @id @default(cuid())
  description String
  amount      Float
  revenueDate DateTime @default(now())
  
  // Job association
  jobId       String?
  
  // Invoice information
  invoiceNumber String?
  
  // Payment method
  paymentMethod String? // CASH, CHECK, CREDIT_CARD, BANK_TRANSFER
  
  // Status
  status        String   @default("RECEIVED") // PENDING, RECEIVED, CANCELLED
  
  createdBy     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  job     Job? @relation(fields: [jobId], references: [id])
  creator User @relation("CreatedRevenues", fields: [createdBy], references: [id])
}

// Fleet Management - Vehicles
model Vehicle {
  id          String   @id @default(cuid())
  name        String
  type        VehicleType @default(TRUCK)
  make        String
  model       String
  year        Int
  vin         String?
  licensePlate String?
  
  // Registration and inspection
  registrationExpiration DateTime?
  inspectionExpiration   DateTime?
  
  // Insurance
  insuranceExpiration    DateTime?
  insuranceProvider      String?
  insurancePolicyNumber  String?
  insuranceCoverage      String? // LIABILITY, COMPREHENSIVE, COLLISION, etc.
  
  // Maintenance tracking
  lastOilChange          DateTime?
  oilChangeMileage       Int?
  oilChangeInterval      Int @default(5000) // miles
  currentMileage         Int @default(0)
  
  // Status
  status                 VehicleStatus @default(ACTIVE)
  
  // Additional details
  purchaseDate           DateTime?
  purchasePrice          Float?
  notes                  String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  maintenanceRecords MaintenanceRecord[]
  inspectionResults  VehicleInspection[]
  fuelRecords        FuelRecord[]
}

enum VehicleType {
  TRUCK
  TRAILER
  EQUIPMENT
  OTHER
}

enum VehicleStatus {
  ACTIVE
  MAINTENANCE
  OUT_OF_SERVICE
  RETIRED
}

// Fleet Management - Maintenance Records
model MaintenanceRecord {
  id          String   @id @default(cuid())
  vehicleId   String
  type        MaintenanceType
  description String
  cost        Float
  
  // Timing
  performedAt     DateTime?
  mileage         Int?
  
  // Next service
  nextDueDate     DateTime?
  nextDueMileage  Int?
  
  // Vendor information
  performedBy     String?
  vendorName      String?
  
  // Receipt/invoice
  receiptCloudStoragePath String?
  receiptFileName         String?
  
  notes           String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  vehicle Vehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
}

enum MaintenanceType {
  OIL_CHANGE
  TIRE_ROTATION
  BRAKE_SERVICE
  INSPECTION
  REPAIR
  PREVENTIVE
  OTHER
}

// Fleet Management - Vehicle Inspections
model VehicleInspection {
  id              String   @id @default(cuid())
  vehicleId       String
  inspectorName   String
  inspectionDate  DateTime
  mileage         Int
  
  // Results stored as JSON
  results         Json // Array of {itemId, itemName, category, status, notes}
  
  overallStatus   InspectionStatus
  notes           String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  vehicle Vehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
}

enum InspectionStatus {
  PASS
  FAIL
  CONDITIONAL
}

// Fleet Management - Fuel Records
model FuelRecord {
  id          String   @id @default(cuid())
  vehicleId   String
  fuelDate    DateTime @default(now())
  gallons     Float
  costPerGallon Float
  totalCost   Float
  mileage     Int?
  
  // Location
  station     String?
  
  // Receipt
  receiptCloudStoragePath String?
  receiptFileName         String?
  
  notes       String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  vehicle Vehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
}

// Employee Location Tracking
model EmployeeLocation {
  id          String   @id @default(cuid())
  userId      String
  latitude    Float
  longitude   Float
  accuracy    Float?
  altitude    Float?
  speed       Float? // mph
  heading     Float? // degrees
  
  // Metadata
  timestamp   DateTime @default(now())
  source      String   @default("GPS") // GPS, NETWORK, MANUAL
  
  // Battery and device info
  batteryLevel Float?
  deviceInfo   String?
  
  createdAt DateTime @default(now())
  
  @@index([userId, timestamp])
  @@index([timestamp])
}

// Geofence Configurations
model Geofence {
  id          String   @id @default(cuid())
  name        String
  description String?
  
  // Location
  latitude    Float
  longitude   Float
  radius      Float // meters
  
  // Settings
  isActive    Boolean  @default(true)
  
  // Auto clock in/out
  autoClockIn  Boolean @default(false)
  autoClockOut Boolean @default(false)
  
  // Notifications
  notifyOnEntry Boolean @default(false)
  notifyOnExit  Boolean @default(false)
  
  // Associated job
  jobId       String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  geofenceEvents GeofenceEvent[]
}

// Geofence Events
model GeofenceEvent {
  id          String   @id @default(cuid())
  geofenceId  String
  userId      String
  eventType   GeofenceEventType
  timestamp   DateTime @default(now())
  
  // Location details
  latitude    Float
  longitude   Float
  
  // Actions taken
  clockedIn   Boolean @default(false)
  clockedOut  Boolean @default(false)
  
  // Associated timesheet
  timesheetId String?
  
  createdAt DateTime @default(now())
  
  geofence Geofence @relation(fields: [geofenceId], references: [id], onDelete: Cascade)
  
  @@index([userId, timestamp])
  @@index([geofenceId, timestamp])
}

enum GeofenceEventType {
  ENTRY
  EXIT
  DWELL
}

// Weather Alerts
model WeatherAlert {
  id          String   @id @default(cuid())
  alertType   WeatherAlertType
  severity    WeatherSeverity
  title       String
  description String
  
  // Location
  latitude    Float
  longitude   Float
  radius      Float @default(50000) // meters (default 50km)
  
  // Timing
  startTime   DateTime
  endTime     DateTime
  
  // Weather data
  conditions  String? // RAIN, SNOW, THUNDERSTORM, etc.
  temperature Float?
  precipitation Float? // inches
  windSpeed   Float? // mph
  
  // Recommendations
  workRecommendation String? // PROCEED, CAUTION, DELAY, CANCEL
  
  // Status
  acknowledged Boolean @default(false)
  active       Boolean @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([latitude, longitude, active])
  @@index([startTime, endTime])
}

enum WeatherAlertType {
  RAIN
  HEAVY_RAIN
  THUNDERSTORM
  SNOW
  EXTREME_HEAT
  EXTREME_COLD
  HIGH_WIND
  FROST
  GENERAL
}

enum WeatherSeverity {
  LOW
  MODERATE
  HIGH
  SEVERE
}

// Premium Subscription Tiers
model SubscriptionTier {
  id          String   @id @default(cuid())
  name        String   @unique // FREE, BASIC, PROFESSIONAL, ENTERPRISE
  displayName String
  description String?
  price       Float
  billingPeriod String @default("MONTHLY") // MONTHLY, YEARLY
  
  // Feature limits
  maxEmployees        Int @default(-1) // -1 = unlimited
  maxVehicles         Int @default(-1)
  maxJobs             Int @default(-1)
  
  // Features
  weatherAlerts       Boolean @default(false)
  gpsTracking         Boolean @default(false)
  geofencing          Boolean @default(false)
  advancedReporting   Boolean @default(false)
  customEstimates     Boolean @default(false)
  apiAccess           Boolean @default(false)
  prioritySupport     Boolean @default(false)
  
  // Status
  isActive            Boolean @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// User Subscriptions
model UserSubscription {
  id                String   @id @default(cuid())
  userId            String   @unique
  tierName          String
  
  // Billing
  status            SubscriptionStatus @default(ACTIVE)
  startDate         DateTime @default(now())
  endDate           DateTime?
  renewalDate       DateTime?
  
  // Payment
  stripeCustomerId      String?
  stripeSubscriptionId  String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum SubscriptionStatus {
  ACTIVE
  TRIAL
  PAST_DUE
  CANCELLED
  EXPIRED
}

// Employee Status Tracking
model EmployeeStatus {
  id          String   @id @default(cuid())
  userId      String   @unique
  status      EmployeeClockStatus @default(CLOCKED_OUT)
  
  // Current timesheet
  currentTimesheetId String?
  
  // Last known location
  lastLatitude       Float?
  lastLongitude      Float?
  lastLocationUpdate DateTime?
  
  // Device info
  isOnline           Boolean @default(false)
  lastSeen           DateTime?
  deviceToken        String? // For push notifications
  
  updatedAt DateTime @updatedAt
  
  @@index([status])
  @@index([isOnline])
}

enum EmployeeClockStatus {
  CLOCKED_IN
  CLOCKED_OUT
  ON_BREAK
}

// End of Day Reports
model EndOfDayReport {
  id          String   @id @default(cuid())
  userId      String
  reportDate  DateTime
  
  // Hours
  totalHours      Float
  regularHours    Float
  overtimeHours   Float
  
  // Locations visited (stored as JSON array)
  locations       Json // Array of {latitude, longitude, timestamp, duration}
  
  // Distance traveled
  totalDistance   Float? // miles
  
  // Jobs worked
  jobsWorked      Json // Array of {jobId, jobTitle, hours}
  
  // Summary
  notes           String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([userId, reportDate])
  @@index([reportDate])
}

// Map Measurements - Saved drawings/measurements on the map
model MapMeasurement {
  id          String   @id @default(cuid())
  name        String
  type        MeasurementType
  
  // Geometry stored as JSON
  vertices    Json // Array of {lat, lng}
  
  // Measurements
  area        Float? // square feet
  perimeter   Float? // feet
  length      Float? // feet
  width       Float? // feet
  
  // AI Detection data
  detectedType      String? // PARKING_LOT, DRIVEWAY, ROAD, etc.
  aiConfidence      Float?
  isAIGenerated     Boolean @default(false)
  isManuallyAdjusted Boolean @default(false)
  
  // Association with job
  jobId       String?
  job         Job?    @relation(fields: [jobId], references: [id], onDelete: Cascade)
  
  // Display settings
  color       String  @default("#3b82f6")
  strokeWidth Int     @default(3)
  fillOpacity Float   @default(0.3)
  isVisible   Boolean @default(true)
  
  // Location
  centerLat   Float
  centerLng   Float
  
  // User who created it
  createdBy   String
  
  // Notes
  notes       String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([jobId])
  @@index([createdBy])
  @@index([centerLat, centerLng])
}

enum MeasurementType {
  POLYGON
  RECTANGLE
  CIRCLE
  LINE
  POLYLINE
}
